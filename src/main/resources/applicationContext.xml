<?xml version="1.0" encoding="UTF-8"?>
<beans xmlns="http://www.springframework.org/schema/beans"
       xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
       xmlns:context="http://www.springframework.org/schema/context"
       xmlns:tx="http://www.springframework.org/schema/tx"
       xmlns:security="http://www.springframework.org/schema/security"
       xsi:schemaLocation="http://www.springframework.org/schema/beans
       http://www.springframework.org/schema/beans/spring-beans.xsd
       http://www.springframework.org/schema/context
       http://www.springframework.org/schema/context/spring-context.xsd
       http://www.springframework.org/schema/tx
       http://www.springframework.org/schema/tx/spring-tx.xsd
       http://www.springframework.org/schema/security
       http://www.springframework.org/schema/security/spring-security.xsd">

    <!-- 1. 属性文件加载 -->
    <context:property-placeholder location="classpath:jdbc.properties,classpath:application.properties"
                                  ignore-unresolvable="true"/>

    <!-- 2. 核心 Bean 扫描 (Service, Utils) -->
    <context:component-scan base-package="com.campus.service" />
    <context:component-scan base-package="com.campus.utils">
        <context:exclude-filter type="annotation" expression="org.springframework.stereotype.Controller"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.RestController"/>
        <context:exclude-filter type="annotation" expression="org.springframework.web.bind.annotation.ControllerAdvice"/>
    </context:component-scan>

    <!-- 3. 数据访问配置 -->
    <bean id="dataSource" class="com.alibaba.druid.pool.DruidDataSource" init-method="init" destroy-method="close">
        <property name="driverClassName" value="${jdbc.driver}" />
        <property name="url" value="${jdbc.url}" />
        <property name="username" value="${jdbc.username}" />
        <property name="password" value="${jdbc.password}" />
        <property name="initialSize" value="5" />
        <property name="minIdle" value="5" />
        <property name="maxActive" value="20" />
        <property name="maxWait" value="60000" />
        <property name="timeBetweenEvictionRunsMillis" value="60000" />
        <property name="minEvictableIdleTimeMillis" value="300000"/>
        <property name="validationQuery" value="SELECT 1"/>
        <property name="testWhileIdle" value="true"/>
        <property name="testOnBorrow" value="false"/>
        <property name="testOnReturn" value="false"/>
        <property name="filters" value="stat"/>
        <property name="connectionProperties" value="druid.stat.mergeSql=true;druid.stat.slowSqlMillis=5000"/>
    </bean>
    <bean id="transactionManager" class="org.springframework.jdbc.datasource.DataSourceTransactionManager">
        <property name="dataSource" ref="dataSource"/>
    </bean>
    <tx:annotation-driven transaction-manager="transactionManager"/>
    <bean id="mybatisPlusInterceptor" class="com.baomidou.mybatisplus.extension.plugins.MybatisPlusInterceptor">
        <property name="interceptors">
            <list>
                <bean class="com.baomidou.mybatisplus.extension.plugins.inner.PaginationInnerInterceptor">
                    <constructor-arg name="dbType" value="MYSQL" />
                </bean>
            </list>
        </property>
    </bean>
    <bean id="sqlSessionFactory" class="com.baomidou.mybatisplus.extension.spring.MybatisSqlSessionFactoryBean">
        <property name="dataSource" ref="dataSource" />
        <property name="typeAliasesPackage" value="com.campus.entity" />
        <property name="mapperLocations" value="classpath:mapper/**/*.xml"/>
        <property name="configLocation" value="classpath:mybatis-config.xml" />
        <property name="plugins">
            <array>
                <ref bean="mybatisPlusInterceptor" />
            </array>
        </property>
        <property name="globalConfig">
            <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig">
                <property name="dbConfig">
                    <bean class="com.baomidou.mybatisplus.core.config.GlobalConfig$DbConfig">
                        <property name="idType" value="AUTO" />
                    </bean>
                </property>
            </bean>
        </property>
    </bean>
    <bean class="org.mybatis.spring.mapper.MapperScannerConfigurer">
        <property name="basePackage" value="com.campus.dao"/>
        <property name="sqlSessionFactoryBeanName" value="sqlSessionFactory"/>
    </bean>

    <!-- 4. 安全相关 Bean 定义 -->
    <bean id="passwordEncoder" class="org.springframework.security.crypto.password.NoOpPasswordEncoder"/>
    <bean id="jwtUtil" class="com.campus.utils.JwtUtil"/>
    <bean id="jwtAuthenticationFilter" class="com.campus.utils.JwtAuthenticationFilter"/>

    <!-- 添加MVC Handler Mapping Introspector -->
    <bean id="mvcHandlerMappingIntrospector"
          class="org.springframework.web.servlet.handler.HandlerMappingIntrospector"/>

    <!-- 5. CORS 配置 -->
    <bean id="corsConfigurationSource" class="org.springframework.web.cors.UrlBasedCorsConfigurationSource">
        <property name="corsConfigurations">
            <map>
                <entry key="/**">
                    <bean class="org.springframework.web.cors.CorsConfiguration">
                        <property name="allowedOrigins">
                            <list>
                                <!-- 根据需要配置允许的源 -->
                                <value>http://localhost:7777</value>
                            </list>
                        </property>
                        <property name="allowedOriginPatterns">
                            <list>
                                <value>*</value> <!-- 允许所有来源 -->
                            </list>
                        </property>
                        <property name="allowedMethods">
                            <list>
                                <value>GET</value>
                                <value>POST</value>
                                <value>PUT</value>
                                <value>DELETE</value>
                                <value>OPTIONS</value>
                                <value>PATCH</value>
                                <value>HEAD</value>
                            </list>
                        </property>
                        <property name="allowedHeaders">
                            <list>
                                <value>*</value> <!-- 允许所有请求头 -->
                            </list>
                        </property>
                        <property name="allowCredentials" value="true"/>
                        <property name="exposedHeaders">
                            <list>
                                <value>Authorization</value>
                                <value>Content-Disposition</value>
                            </list>
                        </property>
                        <property name="maxAge" value="3600"/>
                    </bean>
                </entry>
            </map>
        </property>
    </bean>
    <bean id="corsFilter" class="org.springframework.web.filter.CorsFilter">
        <constructor-arg ref="corsConfigurationSource"/>
    </bean>

    <!-- 6. Spring Security HTTP 配置 -->
    <security:http auto-config="false" use-expressions="true" create-session="stateless"
                   entry-point-ref="restAuthenticationEntryPoint" request-matcher="ant">
        <!-- 优先添加 CORS 过滤器 -->
        <security:custom-filter ref="corsFilter" before="CHANNEL_FILTER"/>
        <!-- 禁用 CSRF -->
        <security:csrf disabled="true"/>

        <!-- 添加JWT认证过滤器 -->
        <security:custom-filter ref="jwtAuthenticationFilter" before="FORM_LOGIN_FILTER"/>

        <!-- 配置拦截规则 -->
        <!-- 明确放行 OPTIONS 请求，支持预检请求 -->
        <security:intercept-url pattern="/**" method="OPTIONS" access="permitAll"/>

        <!-- 放行静态资源 -->
        <security:intercept-url pattern="/assets/**" access="permitAll"/>
        <security:intercept-url pattern="/css/**" access="permitAll"/>
        <security:intercept-url pattern="/js/**" access="permitAll"/>
        <security:intercept-url pattern="/images/**" access="permitAll"/>
        <security:intercept-url pattern="/favicon.ico" access="permitAll"/>
        <security:intercept-url pattern="/index.html" access="permitAll"/>
        <security:intercept-url pattern="/logo.png" access="permitAll"/>

        <!-- 先列出所有需要明确放行的 API -->
        <security:intercept-url pattern="/api/users/login" access="permitAll"/>
        <security:intercept-url pattern="/api/users/register" access="permitAll"/>
        <security:intercept-url pattern="/api/users/refresh-token" access="permitAll"/>
        <security:intercept-url pattern="/api/common/**" access="permitAll"/>

        <!-- 放行通知公告的公共接口 -->
        <security:intercept-url pattern="/api/notifications/recent" access="permitAll"/>
        <security:intercept-url pattern="/api/notifications/types" access="permitAll"/>
        <security:intercept-url pattern="/api/notifications/page" method="GET" access="permitAll"/>
        <security:intercept-url pattern="/api/notifications/*" method="GET" access="permitAll"/>

        <!-- 放行论坛公共读取接口 -->
        <security:intercept-url pattern="/api/posts" method="GET" access="permitAll"/>
        <security:intercept-url pattern="/api/posts/hot" method="GET" access="permitAll"/>
        <security:intercept-url pattern="/api/posts/{id:\\d+}" method="GET" access="permitAll"/>

        <!-- 假设 /uploads/** 用于文件访问，也需要放行 -->
        <security:intercept-url pattern="/uploads/**" access="permitAll"/>
        <!-- 放行 swagger 相关路径 -->
        <security:intercept-url pattern="/swagger-ui/**" access="permitAll"/>
        <security:intercept-url pattern="/v3/api-docs/**" access="permitAll"/>
        <security:intercept-url pattern="/swagger-resources/**" access="permitAll"/>
        <security:intercept-url pattern="/webjars/**" access="permitAll"/>

        <!-- 最后，其他所有 /api/** 路径需要认证 -->
        <security:intercept-url pattern="/api/**" access="authenticated"/>

    </security:http>

    <!-- Authentication Manager 配置 -->
    <security:authentication-manager alias="authenticationManager">
        <security:authentication-provider user-service-ref="userDetailsService">
            <security:password-encoder ref="passwordEncoder"/>
        </security:authentication-provider>
    </security:authentication-manager>

    <!-- 7. 通用 Bean -->
    <bean id="objectMapper" class="com.fasterxml.jackson.databind.ObjectMapper" init-method="findAndRegisterModules">
        <!-- 添加必要的配置 -->
        <property name="dateFormat">
            <bean class="java.text.SimpleDateFormat">
                <constructor-arg value="yyyy-MM-dd HH:mm:ss"/>
            </bean>
        </property>
        <property name="serializationInclusion" value="NON_NULL"/>
        <property name="propertyNamingStrategy" value="LOWER_CAMEL_CASE"/>
    </bean>

</beans>