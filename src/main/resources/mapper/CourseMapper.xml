<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.CourseDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.campus.entity.Course">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="course_name" property="courseName" jdbcType="VARCHAR"/>
        <result column="credit" property="credit" jdbcType="DECIMAL"/>
        <result column="introduction" property="introduction" jdbcType="LONGVARCHAR"/>
        <result column="teacher_id" property="teacherId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, course_name, credit,
        introduction, teacher_id, create_time, update_time
    </sql>

    <!-- 获取所有课程 -->
    <select id="getAllCourses" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        ORDER BY course_name
    </select>

    <!-- 根据ID获取课程 -->
    <select id="getCourseById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 根据课程代码获取课程 -->
    <select id="getCourseByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE code = #{courseCode,jdbcType=VARCHAR}
    </select>

    <!-- 根据部门获取课程 -->
    <select id="getCoursesByDepartment" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE department = #{department,jdbcType=VARCHAR}
        ORDER BY course_name
    </select>

    <!-- 根据类型获取课程 -->
    <select id="getCoursesByType" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE type = #{type,jdbcType=VARCHAR}
        ORDER BY course_name
    </select>

    <!-- 搜索课程 -->
    <select id="searchCourses" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE course_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR introduction LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY course_name
    </select>

    <!-- 添加课程 -->
    <insert id="addCourse" parameterType="com.campus.entity.Course" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course (course_name, credit, introduction, teacher_id, status, create_time, update_time
        )
        VALUES (#{courseName,jdbcType=VARCHAR}, #{credit,jdbcType=DECIMAL},
                #{introduction,jdbcType=LONGVARCHAR}, #{teacherId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
            NOW(), NOW()
        )
    </insert>

    <!-- 更新课程 -->
    <update id="updateCourse" parameterType="com.campus.entity.Course">
        UPDATE course
        SET
            course_name = #{courseName,jdbcType=VARCHAR},
            credit = #{credit,jdbcType=DECIMAL},
            introduction = #{introduction,jdbcType=LONGVARCHAR},
            teacher_id   = #{teacherId,jdbcType=INTEGER},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 删除课程 -->
    <delete id="deleteCourse" parameterType="java.lang.Integer">
        DELETE FROM course
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 更新课程状态 -->
    <update id="updateCourseStatus">
        -- This query might be invalid as 'status' is not a DB column in the 'course' table.
        -- Review if this update operation is necessary or should target a different table/column.
        -- For now, commenting it out to avoid errors.
        -- UPDATE course
        -- SET
        --     status = #{status,jdbcType=INTEGER},
        --     update_time = NOW()
        -- WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 检查课程代码是否存在 -->
    <select id="checkCourseCodeExists" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM course
        WHERE code = #{courseNo,jdbcType=VARCHAR}
    </select>

    <!-- 获取课程统计信息 -->
    <select id="getCourseStats" resultType="java.util.Map">
        SELECT
            COUNT(*) as total_courses,
            -- SUM(CASE WHEN status = 1 THEN 1 ELSE 0 END) as active_courses, -- Status column does not exist
            COUNT(DISTINCT department) as total_departments, -- Assuming department exists, though not in Base_Column_List
            COUNT(DISTINCT type)       as total_types,       -- Assuming type exists, though not in Base_Column_List
            SUM(credit)                as total_credits
        FROM course
    </select>

    <!-- 获取部门课程统计信息 -->
    <select id="getDepartmentCourseStats" resultType="java.util.Map">
        SELECT
            department,
            COUNT(*) as course_count,
            COUNT(DISTINCT type) as type_count,
            SUM(credit) as total_credits
        FROM course
        GROUP BY department
        ORDER BY course_count DESC
    </select>

    <!-- 获取课程类型统计信息 -->
    <select id="getCourseTypeStats" resultType="java.util.Map">
        SELECT
            type,
            COUNT(*) as course_count,
            COUNT(DISTINCT department) as department_count,
            SUM(credit) as total_credits,
            AVG(credit) as avg_credits
        FROM course
        GROUP BY type
        ORDER BY course_count DESC
    </select>

    <!-- 根据ID查询课程 -->
    <select id="findById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE id = #{id,jdbcType=BIGINT}
    </select>
    
    <!-- 查询所有课程 -->
    <select id="findAll" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        ORDER BY course_name
    </select>
    
    <!-- 根据教师ID查询课程 -->
    <select id="findByTeacherId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE teacher_id = #{teacherId,jdbcType=INTEGER}
        ORDER BY course_name
    </select>
    
    <!-- 根据课程代码查询课程 -->
    <select id="findByCourseNo" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE code = #{courseNo,jdbcType=VARCHAR}
    </select>
    
    <!-- 根据部门查询课程 -->
    <select id="findByDepartment" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE department = #{department,jdbcType=VARCHAR}
        ORDER BY course_name
    </select>
    
    <!-- 根据课程类型查询课程 -->
    <select id="findByCourseType" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE type = #{courseType,jdbcType=VARCHAR}
        ORDER BY course_name
    </select>
    
    <!-- 分页查询课程 -->
    <select id="findByPage" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        ORDER BY course_name
        LIMIT #{offset}, #{limit}
    </select>
    
    <!-- 获取课程总数 -->
    <select id="getCount" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM course
    </select>
    
    <!-- 搜索课程 -->
    <select id="searchCoursesByKeyword" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        WHERE course_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR introduction LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY course_name
    </select>

    <!-- 插入课程 -->
    <insert id="insert" parameterType="com.campus.entity.Course" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO course (course_name, credit, introduction, teacher_id, status, create_time, update_time
        )
        VALUES (#{courseName,jdbcType=VARCHAR}, #{credit,jdbcType=DECIMAL},
                #{introduction,jdbcType=LONGVARCHAR}, #{teacherId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER},
                NOW(), NOW()
        )
    </insert>

    <!-- 更新课程 -->
    <update id="update" parameterType="com.campus.entity.Course">
        UPDATE course
        SET
            course_name = #{courseName,jdbcType=VARCHAR},
            credit = #{credit,jdbcType=DECIMAL},
            introduction = #{introduction,jdbcType=LONGVARCHAR},
            update_time = #{updateTime,jdbcType=TIMESTAMP}
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 删除课程 -->
    <delete id="delete" parameterType="java.lang.Long">
        DELETE FROM course
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>
    
    <!-- 批量删除课程 -->
    <delete id="batchDelete" parameterType="java.lang.Long">
        DELETE FROM course
        WHERE id IN
        <foreach collection="array" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 更新课程状态 -->
    <update id="updateStatus">
        -- This query might be invalid as 'status' is not a DB column in the 'course' table.
        -- Review if this update operation is necessary or should target a different table/column.
        -- For now, commenting it out to avoid errors.
        -- UPDATE course
        -- SET
        --     status = #{status,jdbcType=INTEGER},
        --     update_time = NOW()
        -- WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 检查课程代码是否存在 -->
    <select id="isCourseCodeExists" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT CASE WHEN COUNT(*) > 0 THEN 1 ELSE 0 END
        FROM course
        WHERE code = #{courseNo,jdbcType=VARCHAR}
    </select>
    
    <!-- 获取指定状态的课程数量 -->
    <select id="getStatusCount" parameterType="java.lang.Integer" resultType="java.lang.Integer">
        -- This query is invalid as 'status' is not a DB column in the 'course' table.
        -- SELECT COUNT(*)
        -- FROM course
        -- WHERE status = #{status,jdbcType=INTEGER}
        SELECT 0 -- Returning 0 temporarily to avoid error
    </select>
    
    <!-- 获取不同部门/学院的数量 -->
    <select id="getDepartmentCount" resultType="java.lang.Integer">
        SELECT COUNT(DISTINCT department)
        FROM course
    </select>
    
    <!-- 获取课程平均学分 -->
    <select id="getAverageCredits" resultType="java.lang.Double">
        SELECT AVG(credit)
        FROM course
    </select>
    
    <!-- 获取部门/学院统计 -->
    <select id="getDepartmentStats" resultType="java.util.Map">
        SELECT
            department,
            COUNT(*) as course_count,
            COUNT(DISTINCT type) as type_count,
            SUM(credit) as total_credits,
            AVG(credit) as avg_credits
        FROM course
        GROUP BY department
        ORDER BY course_count DESC
    </select>
    
    <!-- 获取学分分布统计 -->
    <select id="getCreditDistribution" resultType="java.util.Map">
        SELECT
            CASE
                WHEN credit &lt; 1 THEN '小于1'
                WHEN credit &gt;= 1 AND credit &lt; 2 THEN '1-2'
                WHEN credit &gt;= 2 AND credit &lt; 3 THEN '2-3'
                WHEN credit &gt;= 3 AND credit &lt; 4 THEN '3-4'
                WHEN credit &gt;= 4 AND credit &lt; 5 THEN '4-5'
                ELSE '5及以上'
            END as credit_range,
            COUNT(*) as course_count,
            COUNT(DISTINCT department) as department_count
        FROM course
        GROUP BY credit_range
        ORDER BY CASE
            WHEN credit_range = '小于1' THEN 1
            WHEN credit_range = '1-2' THEN 2
            WHEN credit_range = '2-3' THEN 3
            WHEN credit_range = '3-4' THEN 4
            WHEN credit_range = '4-5' THEN 5
            ELSE 6
        END
    </select>
    
    <!-- 获取课程状态统计 -->
    <select id="getStatusStats" resultType="java.util.Map">
        -- This query is invalid as 'status' is not a DB column in the 'course' table.
        -- Returning empty result set temporarily.
        SELECT '' as status_name, 0 as course_count, 0 as department_count
        WHERE 1 = 0
        -- SELECT
        --     CASE
        --         WHEN status = 0 THEN '未开课'
        --         WHEN status = 1 THEN '进行中'
        --         WHEN status = 2 THEN '已结课'
        --         ELSE '其他'
        --     END as status_name,
        --     COUNT(*) as course_count,
        --     COUNT(DISTINCT department) as department_count
        -- FROM course
        -- GROUP BY status
        -- ORDER BY status
    </select>

    <!-- 检查课程代码是否存在 -->
    <select id="countByCourseCode" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM course
        WHERE code = #{courseNo,jdbcType=VARCHAR}
    </select>

    <!-- 使用MyBatis-Plus查询列表 -->
    <select id="selectList" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM course
        <if test="ew != null">
            <if test="ew.emptyOfWhere == false">
                ${ew.customSqlSegment}
            </if>
        </if>
    </select>

    <!-- 课程表使用的详细映射 -->
    <resultMap id="CourseDetailMap" type="com.campus.entity.Course" extends="BaseResultMap">
        <association property="teacher" javaType="com.campus.entity.User">
            <id column="teacher_id" property="id"/>
            <result column="teacher_name" property="name"/>
        </association>
    </resultMap>

    <!-- 获取所有课程详细信息（包含教师姓名） -->
    <select id="getAllCoursesWithTeacher" resultMap="CourseDetailMap">
        SELECT c.id,
               c.course_name,
               c.credit,
               c.introduction,
               c.teacher_id,
               c.create_time,
               c.update_time,
               u.real_name as teacher_name -- Changed from u.name to u.real_name based on schema
        FROM course c
                 -- Changed join from user u to teacher t, then user u
                 LEFT JOIN teacher t ON c.teacher_id = t.id
                 LEFT JOIN user u ON t.user_id = u.id
        ORDER BY c.course_name
    </select>

    <!-- 分页查询课程（包含教师姓名） -->
    <select id="findCoursesByPageWithTeacher" parameterType="map" resultMap="CourseDetailMap">
        SELECT
        c.id, c.course_name, c.credit,
        c.introduction, c.teacher_id, c.create_time, c.update_time,
        u.real_name as teacher_name -- Changed from u.name to u.real_name
        FROM course c
        -- Changed join from user u to teacher t, then user u
        LEFT JOIN teacher t ON c.teacher_id = t.id
        LEFT JOIN user u ON t.user_id = u.id
        <where>
            <if test="keyword != null and keyword != ''">
                AND (c.course_name LIKE CONCAT('%', #{keyword}, '%')
                OR c.introduction LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        ORDER BY c.create_time DESC
        LIMIT #{offset}, #{limit}
    </select>

    <!-- 获取课程总数（用于分页） -->
    <select id="countCourses" parameterType="map" resultType="long">
        SELECT COUNT(*)
        FROM course c
        <where>
            <if test="keyword != null and keyword != ''">
                AND (c.course_name LIKE CONCAT('%', #{keyword}, '%')
                OR c.introduction LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
    </select>
</mapper> 