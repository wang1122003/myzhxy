<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.NoticeDao">

    <!-- 基于Notice实体类的结果映射 -->
    <resultMap id="NoticeMap" type="com.campus.entity.Notice">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
        <result column="notice_type" property="noticeType" jdbcType="INTEGER"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="priority" property="priority" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="is_top" property="isTop" jdbcType="INTEGER"/>
        <result column="view_count" property="viewCount" jdbcType="INTEGER"/>
        <result column="publisher_id" property="publisherId" jdbcType="BIGINT"/>
        <result column="publisher_name" property="publisherName" jdbcType="VARCHAR"/>
        <result column="target_type" property="targetType" jdbcType="VARCHAR"/>
        <result column="target_id" property="targetId" jdbcType="BIGINT"/>
        <result column="send_time" property="sendTime" jdbcType="TIMESTAMP"/>
        <result column="expire_time" property="expireTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <result column="attachments_json" property="attachmentsJson" jdbcType="LONGVARCHAR"/>
        <association property="sender" javaType="com.campus.entity.User">
            <id column="publisher_id" property="id"/>
            <result column="sender_username" property="username"/>
            <result column="sender_real_name" property="realName"/>
            <result column="sender_avatar" property="avatar"/>
            <result column="sender_role" property="role"/>
        </association>
    </resultMap>

    <!-- 通用查询字段 - 不包含关联对象 -->
    <sql id="Base_Column_List">
        id, title, content, notice_type, type, priority, status, is_top, view_count, 
        publisher_id, publisher_name, target_type, target_id, send_time, expire_time,
        create_time, update_time, attachments_json
    </sql>

    <!-- 通用查询字段 - 包含关联对象 -->
    <sql id="Base_With_User_Column_List">
        n.id, n.title, n.content, n.notice_type, n.type, n.priority, n.status, n.is_top, n.view_count,
        n.publisher_id, n.publisher_name, n.target_type, n.target_id, n.send_time, n.expire_time,
        n.create_time, n.update_time, n.attachments_json,
        u.username as sender_username, u.real_name as sender_real_name,
        u.avatar as sender_avatar, u.user_type as sender_role
    </sql>
    
    <!-- 根据ID查询通知 -->
    <select id="selectNoticeById" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE id = #{id}
    </select>
    
    <!-- 获取所有通知 -->
    <select id="selectAllNotices" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        ORDER BY is_top DESC, create_time DESC
    </select>
    
    <!-- 根据类型查询通知 -->
    <select id="selectNoticesByType" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE notice_type = #{noticeType}
        ORDER BY is_top DESC, create_time DESC
    </select>
    
    <!-- 根据状态查询通知 -->
    <select id="selectNoticesByStatus" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE status = #{status}
        ORDER BY is_top DESC, create_time DESC
    </select>
    
    <!-- 获取最近的通知 -->
    <select id="selectRecentNotices" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE status = 1 <!-- 已发布状态 -->
        ORDER BY create_time DESC
        LIMIT #{limit}
    </select>
    
    <!-- 获取置顶通知 -->
    <select id="selectTopNotices" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE is_top = 1 AND status = 1 <!-- 置顶且已发布 -->
        ORDER BY create_time DESC
    </select>
    
    <!-- 根据发布者ID查询通知 -->
    <select id="selectNoticesByPublisherId" resultMap="NoticeMap">
        SELECT <include refid="Base_Column_List"/>
        FROM notification
        WHERE publisher_id = #{publisherId}
        ORDER BY is_top DESC, create_time DESC
    </select>
    
    <!-- 插入通知 -->
    <insert id="insertNotice" parameterType="com.campus.entity.Notice" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification (title, content, notice_type, type, priority, status, is_top, view_count,
                                  publisher_id, publisher_name, target_type, target_id, send_time, expire_time,
                                  create_time, update_time, attachments_json)
        VALUES (#{title}, #{content}, #{noticeType}, #{type}, #{priority}, #{status}, #{isTop}, #{viewCount},
                #{publisherId}, #{publisherName}, #{targetType}, #{targetId}, #{sendTime}, #{expireTime},
                #{createTime}, #{updateTime}, #{attachmentsJson}
        )
    </insert>
    
    <!-- 更新通知 -->
    <update id="updateNotice" parameterType="com.campus.entity.Notice">
        UPDATE notification
        <set>
            <if test="title != null">title = #{title},</if>
            <if test="content != null">content = #{content},</if>
            <if test="noticeType != null">notice_type = #{noticeType},</if>
            <if test="type != null">type = #{type},</if>
            <if test="priority != null">priority = #{priority},</if>
            <if test="status != null">status = #{status},</if>
            <if test="isTop != null">is_top = #{isTop},</if>
            <if test="publisherId != null">publisher_id = #{publisherId},</if>
            <if test="publisherName != null">publisher_name = #{publisherName},</if>
            <if test="targetType != null">target_type = #{targetType},</if>
            <if test="targetId != null">target_id = #{targetId},</if>
            <if test="sendTime != null">send_time = #{sendTime},</if>
            <if test="expireTime != null">expire_time = #{expireTime},</if>
            <if test="attachmentsJson != null">attachments_json = #{attachmentsJson},</if>
            <if test="updateTime != null">update_time = #{updateTime}</if>
        </set>
        WHERE id = #{id}
    </update>
    
    <!-- 更新通知状态 -->
    <update id="updateNoticeStatus">
        UPDATE notification
        SET status = #{status}, update_time = NOW()
        WHERE id = #{id}
    </update>
    
    <!-- 更新阅读次数 -->
    <update id="incrementViewCount">
        UPDATE notification
        SET view_count = view_count + 1
        WHERE id = #{id}
    </update>
    
    <!-- 删除通知 -->
    <delete id="deleteNotice">
        DELETE
        FROM notification
        WHERE id = #{id}
    </delete>
    
    <!-- 批量删除通知 -->
    <delete id="batchDeleteNotices">
        DELETE FROM notification
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id}
        </foreach>
    </delete>

    <!-- 查询通知总数 -->
    <select id="countNotices" resultType="int">
        SELECT COUNT(*)
        FROM notification
    </select>

    <!-- 分页查询通知 -->
    <select id="selectNoticesPaged" resultMap="NoticeMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification
        ORDER BY is_top DESC, create_time DESC
        LIMIT #{offset}, #{pageSize}
    </select>

    <!-- 根据关键词搜索通知 (标题或内容) -->
    <select id="searchNoticesByKeyword" resultMap="NoticeMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification
        <where>
            <if test="keyword != null and keyword != ''">
                (title LIKE CONCAT('%', #{keyword}, '%') OR content LIKE CONCAT('%', #{keyword}, '%'))
            </if>
        </where>
        ORDER BY is_top DESC, create_time DESC
    </select>

    <!-- 根据字符串类型获取通知 -->
    <select id="getNotificationsByType" parameterType="java.lang.String" resultMap="NoticeMap">
        SELECT
        <include refid="Base_With_User_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.publisher_id = u.id
        WHERE n.type = #{type,jdbcType=VARCHAR}
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据优先级获取通知 -->
    <select id="getNotificationsByPriority" parameterType="java.lang.Integer" resultMap="NoticeMap">
        SELECT
        <include refid="Base_With_User_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.publisher_id = u.id
        WHERE n.priority = #{priority,jdbcType=INTEGER}
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据目标类型和ID获取通知 -->
    <select id="getNotificationsByTarget" resultMap="NoticeMap">
        SELECT
        <include refid="Base_With_User_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.publisher_id = u.id
        WHERE n.target_type = #{targetType,jdbcType=VARCHAR}
        AND n.target_id = #{targetId,jdbcType=BIGINT}
        ORDER BY n.send_time DESC
    </select>

    <!-- 获取有效通知 -->
    <select id="getActiveNotifications" resultMap="NoticeMap">
        SELECT
        <include refid="Base_With_User_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.publisher_id = u.id
        WHERE n.status = 1
        AND (n.expire_time IS NULL OR n.expire_time > NOW())
        ORDER BY n.priority DESC, n.send_time DESC
    </select>

    <!-- 搜索通知 -->
    <select id="searchNotifications" parameterType="java.lang.String" resultMap="NoticeMap">
        SELECT
        <include refid="Base_With_User_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.publisher_id = u.id
        WHERE n.title LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.content LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.type LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.username LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.real_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY n.send_time DESC
    </select>

    <!-- 添加通知(兼容接口) -->
    <insert id="addNotification" parameterType="com.campus.entity.Notice" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification (title, content, type, priority, publisher_id,
                                  target_type, target_id, status, send_time,
                                  expire_time, create_time, update_time)
        VALUES (#{title,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}, #{type,jdbcType=VARCHAR},
                #{priority,jdbcType=INTEGER}, #{publisherId,jdbcType=BIGINT}, #{targetType,jdbcType=VARCHAR},
                #{targetId,jdbcType=BIGINT}, #{status,jdbcType=INTEGER}, #{sendTime,jdbcType=TIMESTAMP},
                #{expireTime,jdbcType=TIMESTAMP}, NOW(), NOW())
    </insert>

    <!-- 更新通知(兼容接口) -->
    <update id="updateNotification" parameterType="com.campus.entity.Notice">
        UPDATE notification
        SET title        = #{title,jdbcType=VARCHAR},
            content      = #{content,jdbcType=LONGVARCHAR},
            type         = #{type,jdbcType=VARCHAR},
            priority     = #{priority,jdbcType=INTEGER},
            publisher_id = #{publisherId,jdbcType=BIGINT},
            target_type  = #{targetType,jdbcType=VARCHAR},
            target_id    = #{targetId,jdbcType=BIGINT},
            status       = #{status,jdbcType=INTEGER},
            send_time    = #{sendTime,jdbcType=TIMESTAMP},
            expire_time  = #{expireTime,jdbcType=TIMESTAMP},
            update_time  = NOW()
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 删除通知(兼容接口) -->
    <delete id="deleteNotification" parameterType="java.lang.Integer">
        DELETE
        FROM notification
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 批量更新通知状态 -->
    <update id="batchUpdateNotificationStatus">
        UPDATE notification
        SET
        status = #{status,jdbcType=INTEGER},
        update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id,jdbcType=BIGINT}
        </foreach>
    </update>

    <!-- 获取通知统计信息 -->
    <select id="getNotificationStats" resultType="java.util.Map">
        SELECT COUNT(*)                                            as total_notifications,
               COUNT(CASE WHEN status = 1 THEN 1 END)              as active_notifications,
               COUNT(CASE WHEN status = 0 THEN 1 END)              as inactive_notifications,
               COUNT(DISTINCT type)                                as total_types,
               COUNT(DISTINCT publisher_id)                        as total_senders,
               COUNT(DISTINCT target_type)                         as total_target_types,
               COUNT(DISTINCT target_id)                           as total_targets,
               COUNT(CASE WHEN expire_time &lt;= NOW() THEN 1 END) as expired_notifications
        FROM notification
    </select>

    <!-- 获取通知类型统计信息 -->
    <select id="getTypeStats" resultType="java.util.Map">
        SELECT type,
               COUNT(*)                               as notification_count,
               COUNT(CASE WHEN status = 1 THEN 1 END) as active_count,
               COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_count,
               MIN(create_time)                       as first_created,
               MAX(create_time)                       as last_created
        FROM notification
        GROUP BY type
        ORDER BY notification_count DESC
    </select>

</mapper> 