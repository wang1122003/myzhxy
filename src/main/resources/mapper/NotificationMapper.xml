<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.NotificationDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.campus.entity.Notification">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="title" property="title" jdbcType="VARCHAR"/>
        <result column="content" property="content" jdbcType="LONGVARCHAR"/>
        <result column="type" property="type" jdbcType="VARCHAR"/>
        <result column="priority" property="priority" jdbcType="INTEGER"/>
        <result column="sender_id" property="senderId" jdbcType="INTEGER"/>
        <result column="target_type" property="targetType" jdbcType="VARCHAR"/>
        <result column="target_id" property="targetId" jdbcType="INTEGER"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="send_time" property="sendTime" jdbcType="TIMESTAMP"/>
        <result column="expire_time" property="expireTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <association property="sender" javaType="com.campus.entity.User">
            <id column="sender_id" property="id"/>
            <result column="sender_username" property="username"/>
            <result column="sender_real_name" property="realName"/>
            <result column="sender_avatar" property="avatar"/>
            <result column="sender_role" property="role"/>
        </association>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        n.id, n.title, n.content, n.type, n.priority,
        n.sender_id, n.target_type, n.target_id, n.status,
        n.send_time, n.expire_time, n.create_time, n.update_time,
        u.username as sender_username, u.real_name as sender_real_name,
        u.avatar as sender_avatar, u.role as sender_role
    </sql>

    <!-- 获取所有通知 -->
    <select id="getAllNotifications" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据ID获取通知 -->
    <select id="getNotificationById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 根据类型获取通知 -->
    <select id="getNotificationsByType" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.type = #{type,jdbcType=VARCHAR}
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据优先级获取通知 -->
    <select id="getNotificationsByPriority" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.priority = #{priority,jdbcType=INTEGER}
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据发送者ID获取通知 -->
    <select id="getNotificationsBySenderId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.sender_id = #{senderId,jdbcType=INTEGER}
        ORDER BY n.send_time DESC
    </select>

    <!-- 根据目标类型和ID获取通知 -->
    <select id="getNotificationsByTarget" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.target_type = #{targetType,jdbcType=VARCHAR}
        AND n.target_id = #{targetId,jdbcType=INTEGER}
        ORDER BY n.send_time DESC
    </select>

    <!-- 获取有效通知 -->
    <select id="getActiveNotifications" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.status = 1
        AND (n.expire_time IS NULL OR n.expire_time > NOW())
        ORDER BY n.priority DESC, n.send_time DESC
    </select>

    <!-- 搜索通知 -->
    <select id="searchNotifications" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        WHERE n.title LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.content LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.type LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.username LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.real_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY n.send_time DESC
    </select>

    <!-- 添加通知 -->
    <insert id="addNotification" parameterType="com.campus.entity.Notification" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification (
            title, content, type, priority, sender_id,
            target_type, target_id, status, send_time,
            expire_time, create_time, update_time
        )
        VALUES (
            #{title,jdbcType=VARCHAR}, #{content,jdbcType=LONGVARCHAR}, #{type,jdbcType=VARCHAR},
            #{priority,jdbcType=INTEGER}, #{senderId,jdbcType=INTEGER}, #{targetType,jdbcType=VARCHAR},
            #{targetId,jdbcType=INTEGER}, #{status,jdbcType=INTEGER}, #{sendTime,jdbcType=TIMESTAMP},
            #{expireTime,jdbcType=TIMESTAMP}, NOW(), NOW()
        )
    </insert>

    <!-- 更新通知 -->
    <update id="updateNotification" parameterType="com.campus.entity.Notification">
        UPDATE notification
        SET
            title = #{title,jdbcType=VARCHAR},
            content = #{content,jdbcType=LONGVARCHAR},
            type = #{type,jdbcType=VARCHAR},
            priority = #{priority,jdbcType=INTEGER},
            sender_id = #{senderId,jdbcType=INTEGER},
            target_type = #{targetType,jdbcType=VARCHAR},
            target_id = #{targetId,jdbcType=INTEGER},
            status = #{status,jdbcType=INTEGER},
            send_time = #{sendTime,jdbcType=TIMESTAMP},
            expire_time = #{expireTime,jdbcType=TIMESTAMP},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 删除通知 -->
    <delete id="deleteNotification" parameterType="java.lang.Integer">
        DELETE FROM notification
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 更新通知状态 -->
    <update id="updateNotificationStatus">
        UPDATE notification
        SET
            status = #{status,jdbcType=INTEGER},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 批量更新通知状态 -->
    <update id="batchUpdateNotificationStatus">
        UPDATE notification
        SET
            status = #{status,jdbcType=INTEGER},
            update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </update>

    <!-- 获取通知统计信息 -->
    <select id="getNotificationStats" resultType="java.util.Map">
        SELECT
            COUNT(*) as total_notifications,
            COUNT(CASE WHEN status = 1 THEN 1 END) as active_notifications,
            COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_notifications,
            COUNT(DISTINCT type) as total_types,
            COUNT(DISTINCT sender_id) as total_senders,
            COUNT(DISTINCT target_type) as total_target_types,
            COUNT(DISTINCT target_id) as total_targets,
            COUNT(CASE WHEN expire_time &lt;= NOW() THEN 1 END) as expired_notifications
        FROM notification
    </select>

    <!-- 获取通知类型统计信息 -->
    <select id="getTypeStats" resultType="java.util.Map">
        SELECT
            type,
            COUNT(*) as notification_count,
            COUNT(CASE WHEN status = 1 THEN 1 END) as active_count,
            COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_count,
            COUNT(DISTINCT sender_id) as sender_count,
            COUNT(DISTINCT target_type) as target_type_count,
            COUNT(DISTINCT target_id) as target_count,
            COUNT(CASE WHEN expire_time &lt;= NOW() THEN 1 END) as expired_count
        FROM notification
        GROUP BY type
        ORDER BY notification_count DESC
    </select>

    <!-- 获取发送者统计信息 -->
    <select id="getSenderStats" resultType="java.util.Map">
        SELECT
            u.username as sender_username,
            u.real_name as sender_real_name,
            u.role as sender_role,
            COUNT(n.id) as notification_count,
            COUNT(CASE WHEN n.status = 1 THEN 1 END) as active_count,
            COUNT(CASE WHEN n.status = 0 THEN 1 END) as inactive_count,
            COUNT(DISTINCT n.type) as type_count,
            COUNT(DISTINCT n.target_type) as target_type_count,
            COUNT(DISTINCT n.target_id) as target_count,
            COUNT(CASE WHEN n.expire_time &lt;= NOW() THEN 1 END) as expired_count
        FROM notification n
        LEFT JOIN user u ON n.sender_id = u.id
        GROUP BY n.sender_id, u.username, u.real_name, u.role
        ORDER BY notification_count DESC
    </select>

    <!-- 获取目标类型统计信息 -->
    <select id="getTargetTypeStats" resultType="java.util.Map">
        SELECT
            target_type,
            COUNT(*) as notification_count,
            COUNT(CASE WHEN status = 1 THEN 1 END) as active_count,
            COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_count,
            COUNT(DISTINCT type) as type_count,
            COUNT(DISTINCT sender_id) as sender_count,
            COUNT(DISTINCT target_id) as target_count,
            COUNT(CASE WHEN expire_time &lt;= NOW() THEN 1 END) as expired_count
        FROM notification
        GROUP BY target_type
        ORDER BY notification_count DESC
    </select>

    <!-- 获取月度通知统计信息 -->
    <select id="getMonthlyNotificationStats" resultType="java.util.Map">
        SELECT
            DATE_FORMAT(send_time, '%Y-%m') as month,
            COUNT(*) as notification_count,
            COUNT(CASE WHEN status = 1 THEN 1 END) as active_count,
            COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_count,
            COUNT(DISTINCT type) as type_count,
            COUNT(DISTINCT sender_id) as sender_count,
            COUNT(DISTINCT target_type) as target_type_count,
            COUNT(DISTINCT target_id) as target_count,
            COUNT(CASE WHEN expire_time &lt;= NOW() THEN 1 END) as expired_count
        FROM notification
        GROUP BY DATE_FORMAT(send_time, '%Y-%m')
        ORDER BY month DESC
    </select>
</mapper> 