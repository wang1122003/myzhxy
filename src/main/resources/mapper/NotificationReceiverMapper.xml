<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.NotificationReceiverDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.campus.entity.NotificationReceiver">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="notification_id" property="notificationId" jdbcType="INTEGER"/>
        <result column="receiver_id" property="receiverId" jdbcType="INTEGER"/>
        <result column="receiver_type" property="receiverType" jdbcType="VARCHAR"/>
        <result column="read_status" property="readStatus" jdbcType="INTEGER"/>
        <result column="read_time" property="readTime" jdbcType="TIMESTAMP"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
        <association property="notification" javaType="com.campus.entity.Notification">
            <id column="notification_id" property="id"/>
            <result column="notification_title" property="title"/>
            <result column="notification_content" property="content"/>
            <result column="notification_type" property="type"/>
            <result column="notification_priority" property="priority"/>
            <result column="notification_status" property="status"/>
            <result column="notification_send_time" property="sendTime"/>
            <result column="notification_expire_time" property="expireTime"/>
        </association>
        <association property="receiver" javaType="com.campus.entity.User">
            <id column="receiver_id" property="id"/>
            <result column="receiver_username" property="username"/>
            <result column="receiver_real_name" property="realName"/>
            <result column="receiver_avatar" property="avatar"/>
            <result column="receiver_role" property="role"/>
        </association>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        nr.id, nr.notification_id, nr.receiver_id, nr.receiver_type, nr.read_status,
        nr.read_time, nr.create_time, nr.update_time,
        n.title as notification_title, n.content as notification_content,
        n.type as notification_type, n.priority as notification_priority,
        n.status as notification_status, n.send_time as notification_send_time,
        n.expire_time as notification_expire_time,
        u.username as receiver_username, u.real_name as receiver_real_name,
        u.avatar as receiver_avatar, u.role as receiver_role
    </sql>

    <!-- 获取所有接收记录 -->
    <select id="getAllReceivers" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        ORDER BY nr.create_time DESC
    </select>

    <!-- 根据ID获取接收记录 -->
    <select id="getReceiverById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 根据通知ID获取接收记录 -->
    <select id="getReceiversByNotificationId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.notification_id = #{notificationId,jdbcType=INTEGER}
        ORDER BY nr.create_time DESC
    </select>

    <!-- 根据接收者ID获取接收记录 -->
    <select id="getReceiversByReceiverId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.receiver_id = #{receiverId,jdbcType=INTEGER}
        ORDER BY nr.create_time DESC
    </select>

    <!-- 根据读取状态获取接收记录 -->
    <select id="getReceiversByReadStatus" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.read_status = #{readStatus,jdbcType=INTEGER}
        ORDER BY nr.create_time DESC
    </select>

    <!-- 获取用户未读通知（不带接收者类型） -->
    <select id="getUnreadNotificationsWithoutType" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.receiver_id = #{receiverId,jdbcType=INTEGER}
        AND nr.read_status = 0
        AND n.status = 1
        AND (n.expire_time IS NULL OR n.expire_time > NOW())
        ORDER BY n.priority DESC, n.send_time DESC
    </select>

    <!-- 搜索接收记录 -->
    <select id="searchReceivers" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE n.title LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.content LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR n.type LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.username LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR u.real_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY nr.create_time DESC
    </select>

    <!-- 添加接收记录 -->
    <insert id="addReceiver" parameterType="com.campus.entity.NotificationReceiver" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO notification_receiver (
            notification_id, receiver_id, read_status,
            read_time, create_time, update_time
        )
        VALUES (
            #{notificationId,jdbcType=INTEGER}, #{receiverId,jdbcType=INTEGER}, #{readStatus,jdbcType=INTEGER},
            #{readTime,jdbcType=TIMESTAMP}, NOW(), NOW()
        )
    </insert>

    <!-- 批量添加接收记录 -->
    <insert id="batchAddReceivers">
        INSERT INTO notification_receiver (
            notification_id, receiver_id, read_status,
            create_time, update_time
        )
        VALUES
        <foreach collection="receivers" item="receiver" separator=",">
            (
                #{receiver.notificationId,jdbcType=INTEGER},
                #{receiver.receiverId,jdbcType=INTEGER},
                #{receiver.readStatus,jdbcType=INTEGER},
                NOW(), NOW()
            )
        </foreach>
    </insert>

    <!-- 更新接收记录 -->
    <update id="updateReceiver" parameterType="com.campus.entity.NotificationReceiver">
        UPDATE notification_receiver
        SET
            notification_id = #{notificationId,jdbcType=INTEGER},
            receiver_id = #{receiverId,jdbcType=INTEGER},
            read_status = #{readStatus,jdbcType=INTEGER},
            read_time = #{readTime,jdbcType=TIMESTAMP},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 删除接收记录 -->
    <delete id="deleteReceiver" parameterType="java.lang.Integer">
        DELETE FROM notification_receiver
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 更新读取状态 -->
    <update id="updateReadStatus">
        UPDATE notification_receiver
        SET
            read_status = #{readStatus,jdbcType=INTEGER},
            read_time = CASE WHEN #{readStatus,jdbcType=INTEGER} = 1 THEN NOW() ELSE read_time END,
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 批量更新读取状态 -->
    <update id="batchUpdateReadStatus">
        UPDATE notification_receiver
        SET
            read_status = #{readStatus,jdbcType=INTEGER},
            read_time = CASE WHEN #{readStatus,jdbcType=INTEGER} = 1 THEN NOW() ELSE read_time END,
            update_time = NOW()
        WHERE id IN
        <foreach collection="ids" item="id" open="(" separator="," close=")">
            #{id,jdbcType=INTEGER}
        </foreach>
    </update>

    <!-- 获取接收记录统计信息 -->
    <select id="getReceiverStats" resultType="java.util.Map">
        SELECT
            COUNT(*) as total_receivers,
            COUNT(CASE WHEN read_status = 1 THEN 1 END) as read_count,
            COUNT(CASE WHEN read_status = 0 THEN 1 END) as unread_count,
            COUNT(DISTINCT notification_id) as total_notifications,
            COUNT(DISTINCT receiver_id) as total_receivers,
            COUNT(CASE WHEN read_time IS NOT NULL THEN 1 END) as total_read_time
        FROM notification_receiver
    </select>

    <!-- 获取通知接收统计信息 -->
    <select id="getNotificationReceiverStats" resultType="java.util.Map">
        SELECT
            n.id as notification_id,
            n.title as notification_title,
            n.type as notification_type,
            n.priority as notification_priority,
            COUNT(nr.id) as receiver_count,
            COUNT(CASE WHEN nr.read_status = 1 THEN 1 END) as read_count,
            COUNT(CASE WHEN nr.read_status = 0 THEN 1 END) as unread_count,
            COUNT(DISTINCT nr.receiver_id) as unique_receiver_count,
            AVG(CASE WHEN nr.read_time IS NOT NULL THEN TIMESTAMPDIFF(MINUTE, n.send_time, nr.read_time) END) as average_read_time_minutes
        FROM notification n
        LEFT JOIN notification_receiver nr ON n.id = nr.notification_id
        GROUP BY n.id, n.title, n.type, n.priority
        ORDER BY receiver_count DESC
    </select>

    <!-- 获取用户接收统计信息 -->
    <select id="getUserReceiverStats" resultType="java.util.Map">
        SELECT
            u.id as user_id,
            u.username,
            u.real_name,
            u.role,
            COUNT(nr.id) as notification_count,
            COUNT(CASE WHEN nr.read_status = 1 THEN 1 END) as read_count,
            COUNT(CASE WHEN nr.read_status = 0 THEN 1 END) as unread_count,
            COUNT(DISTINCT nr.notification_id) as unique_notification_count,
            AVG(CASE WHEN nr.read_time IS NOT NULL THEN TIMESTAMPDIFF(MINUTE, n.send_time, nr.read_time) END) as average_read_time_minutes
        FROM user u
        LEFT JOIN notification_receiver nr ON u.id = nr.receiver_id
        LEFT JOIN notification n ON nr.notification_id = n.id
        GROUP BY u.id, u.username, u.real_name, u.role
        ORDER BY notification_count DESC
    </select>

    <!-- 获取月度接收统计信息 -->
    <select id="getMonthlyReceiverStats" resultType="java.util.Map">
        SELECT
            DATE_FORMAT(nr.create_time, '%Y-%m') as month,
            COUNT(nr.id) as receiver_count,
            COUNT(CASE WHEN nr.read_status = 1 THEN 1 END) as read_count,
            COUNT(CASE WHEN nr.read_status = 0 THEN 1 END) as unread_count,
            COUNT(DISTINCT nr.notification_id) as notification_count,
            COUNT(DISTINCT nr.receiver_id) as receiver_count,
            AVG(CASE WHEN nr.read_time IS NOT NULL THEN TIMESTAMPDIFF(MINUTE, n.send_time, nr.read_time) END) as average_read_time_minutes
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        GROUP BY DATE_FORMAT(nr.create_time, '%Y-%m')
        ORDER BY month DESC
    </select>
    
    <!-- 获取用户的所有通知 -->
    <select id="getUserNotifications" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.receiver_id = #{receiverId,jdbcType=INTEGER}
        AND nr.receiver_type = #{receiverType,jdbcType=VARCHAR}
        ORDER BY n.priority DESC, n.send_time DESC
    </select>
    
    <!-- 获取用户未读通知 -->
    <select id="getUnreadNotifications" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.receiver_id = #{receiverId,jdbcType=INTEGER}
        AND nr.receiver_type = #{receiverType,jdbcType=VARCHAR}
        AND nr.read_status = 0
        ORDER BY n.priority DESC, n.send_time DESC
    </select>
    
    <!-- 标记通知为已读 -->
    <update id="markAsRead" parameterType="java.lang.Integer">
        UPDATE notification_receiver
        SET
            read_status = 1,
            read_time = NOW(),
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>
    
    <!-- 批量标记通知为已读 -->
    <update id="markAllAsRead">
        UPDATE notification_receiver
        SET
            read_status = 1,
            read_time = NOW(),
            update_time = NOW()
        WHERE receiver_id = #{receiverId,jdbcType=INTEGER}
        AND receiver_type = #{receiverType,jdbcType=VARCHAR}
        AND read_status = 0
    </update>
    
    <!-- 根据通知ID获取接收记录 -->
    <select id="getByNotificationId" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM notification_receiver nr
        LEFT JOIN notification n ON nr.notification_id = n.id
        LEFT JOIN user u ON nr.receiver_id = u.id
        WHERE nr.notification_id = #{notificationId,jdbcType=INTEGER}
        ORDER BY nr.create_time DESC
    </select>
    
    <!-- 删除通知接收记录 -->
    <delete id="deleteNotificationReceiver" parameterType="java.lang.Integer">
        DELETE FROM notification_receiver
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 根据通知ID统计已读数量 -->
    <select id="countReadByNotificationId" parameterType="java.lang.Long" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM notification_receiver
        WHERE notification_id = #{notificationId,jdbcType=BIGINT}
          AND read_status = 'Read' -- 假设已读状态值为 'Read'
    </select>
</mapper>