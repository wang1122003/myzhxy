<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.RoleDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.campus.entity.Role">
        <id column="id" property="id" jdbcType="INTEGER"/>
        <result column="name" property="name" jdbcType="VARCHAR"/>
        <result column="code" property="code" jdbcType="VARCHAR"/>
        <result column="description" property="description" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="INTEGER"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        id, name, code, description, status, create_time, update_time
    </sql>

    <!-- 获取所有角色 -->
    <select id="getAllRoles" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role
        ORDER BY create_time DESC
    </select>

    <!-- 根据ID获取角色 -->
    <select id="getRoleById" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role
        WHERE id = #{id,jdbcType=INTEGER}
    </select>

    <!-- 根据编码获取角色 -->
    <select id="getRoleByCode" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role
        WHERE code = #{code,jdbcType=VARCHAR}
    </select>

    <!-- 根据状态获取角色 -->
    <select id="getRolesByStatus" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role
        WHERE status = #{status,jdbcType=INTEGER}
        ORDER BY create_time DESC
    </select>

    <!-- 搜索角色 -->
    <select id="searchRoles" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role
        WHERE name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR code LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        OR description LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
        ORDER BY create_time DESC
    </select>

    <!-- 添加角色 -->
    <insert id="addRole" parameterType="com.campus.entity.Role" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO role (
            name, code, description, status, create_time, update_time
        )
        VALUES (
            #{name,jdbcType=VARCHAR}, #{code,jdbcType=VARCHAR},
            #{description,jdbcType=VARCHAR}, #{status,jdbcType=INTEGER},
            NOW(), NOW()
        )
    </insert>

    <!-- 更新角色 -->
    <update id="updateRole" parameterType="com.campus.entity.Role">
        UPDATE role
        SET name = #{name,jdbcType=VARCHAR},
            code = #{code,jdbcType=VARCHAR},
            description = #{description,jdbcType=VARCHAR},
            status = #{status,jdbcType=INTEGER},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 删除角色 -->
    <delete id="deleteRole" parameterType="java.lang.Integer">
        DELETE FROM role
        WHERE id = #{id,jdbcType=INTEGER}
    </delete>

    <!-- 更新角色状态 -->
    <update id="updateRoleStatus">
        UPDATE role
        SET status = #{status,jdbcType=INTEGER},
            update_time = NOW()
        WHERE id = #{id,jdbcType=INTEGER}
    </update>

    <!-- 检查角色编码是否存在 -->
    <select id="isRoleCodeExists" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM role
        WHERE code = #{code,jdbcType=VARCHAR}
        <if test="id != null">
            AND id != #{id,jdbcType=INTEGER}
        </if>
    </select>

    <!-- 获取角色统计信息 -->
    <select id="getRoleStats" resultType="java.util.Map">
        SELECT
            COUNT(*) as total_roles,
            COUNT(CASE WHEN status = 1 THEN 1 END) as active_count,
            COUNT(CASE WHEN status = 0 THEN 1 END) as inactive_count
        FROM role
    </select>

    <!-- 获取用户角色统计信息 -->
    <select id="getUserRoleStats" resultType="java.util.Map">
        SELECT
            r.id as role_id,
            r.name as role_name,
            r.code as role_code,
            COUNT(ur.user_id) as user_count,
            COUNT(CASE WHEN u.status = 1 THEN 1 END) as active_user_count,
            COUNT(CASE WHEN u.status = 0 THEN 1 END) as inactive_user_count
        FROM role r
        LEFT JOIN user_role ur ON r.id = ur.role_id
        LEFT JOIN user u ON ur.user_id = u.id
        GROUP BY r.id, r.name, r.code
        ORDER BY user_count DESC
    </select>

    <!-- 获取角色权限统计信息 -->
    <select id="getRolePermissionStats" resultType="java.util.Map">
        SELECT
            r.id as role_id,
            r.name as role_name,
            r.code as role_code,
            COUNT(rp.permission_id) as permission_count,
            COUNT(DISTINCT p.module) as module_count
        FROM role r
        LEFT JOIN role_permission rp ON r.id = rp.role_id
        LEFT JOIN permission p ON rp.permission_id = p.id
        GROUP BY r.id, r.name, r.code
        ORDER BY permission_count DESC
    </select>

    <!-- 获取用户角色 -->
    <select id="getUserRoles" parameterType="java.lang.Integer" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM role r
        INNER JOIN user_role ur ON r.id = ur.role_id
        WHERE ur.user_id = #{userId,jdbcType=INTEGER}
        ORDER BY r.create_time DESC
    </select>

    <!-- 获取角色权限 -->
    <select id="getRolePermissions" parameterType="java.lang.Integer" resultType="java.util.Map">
        SELECT
            p.id as permission_id,
            p.name as permission_name,
            p.code as permission_code,
            p.module as module,
            p.type as type,
            p.description as description
        FROM permission p
        INNER JOIN role_permission rp ON p.id = rp.permission_id
        WHERE rp.role_id = #{roleId,jdbcType=INTEGER}
        ORDER BY p.module ASC, p.type ASC
    </select>

    <!-- 添加用户角色 -->
    <insert id="addUserRole">
        INSERT INTO user_role (
            user_id, role_id, create_time
        )
        VALUES (
            #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, NOW()
        )
    </insert>

    <!-- 删除用户角色 -->
    <delete id="deleteUserRole">
        DELETE FROM user_role
        WHERE user_id = #{userId,jdbcType=INTEGER}
        AND role_id = #{roleId,jdbcType=INTEGER}
    </delete>

    <!-- 添加角色权限 -->
    <insert id="addRolePermission">
        INSERT INTO role_permission (
            role_id, permission_id, create_time
        )
        VALUES (
            #{roleId,jdbcType=INTEGER}, #{permissionId,jdbcType=INTEGER}, NOW()
        )
    </insert>

    <!-- 删除角色权限 -->
    <delete id="deleteRolePermission">
        DELETE FROM role_permission
        WHERE role_id = #{roleId,jdbcType=INTEGER}
        AND permission_id = #{permissionId,jdbcType=INTEGER}
    </delete>

    <!-- 批量添加用户角色 -->
    <insert id="batchAddUserRoles">
        INSERT INTO user_role (
            user_id, role_id, create_time
        )
        VALUES
        <foreach collection="roleIds" item="roleId" separator=",">
            (
                #{userId,jdbcType=INTEGER}, #{roleId,jdbcType=INTEGER}, NOW()
            )
        </foreach>
    </insert>

    <!-- 批量删除用户角色 -->
    <delete id="batchDeleteUserRoles">
        DELETE FROM user_role
        WHERE user_id = #{userId,jdbcType=INTEGER}
        AND role_id IN
        <foreach collection="roleIds" item="roleId" open="(" separator="," close=")">
            #{roleId,jdbcType=INTEGER}
        </foreach>
    </delete>

    <!-- 批量添加角色权限 -->
    <insert id="batchAddRolePermissions">
        INSERT INTO role_permission (
            role_id, permission_id, create_time
        )
        VALUES
        <foreach collection="permissionIds" item="permissionId" separator=",">
            (
                #{roleId,jdbcType=INTEGER}, #{permissionId,jdbcType=INTEGER}, NOW()
            )
        </foreach>
    </insert>

    <!-- 批量删除角色权限 -->
    <delete id="batchDeleteRolePermissions">
        DELETE FROM role_permission
        WHERE role_id = #{roleId,jdbcType=INTEGER}
        AND permission_id IN
        <foreach collection="permissionIds" item="permissionId" open="(" separator="," close=")">
            #{permissionId,jdbcType=INTEGER}
        </foreach>
    </delete>
</mapper> 