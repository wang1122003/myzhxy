<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="com.campus.dao.UserDao">
    <!-- 结果映射 -->
    <resultMap id="BaseResultMap" type="com.campus.entity.User">
        <id column="id" property="id" jdbcType="BIGINT"/>
        <result column="username" property="username" jdbcType="VARCHAR"/>
        <result column="password" property="password" jdbcType="VARCHAR"/>
        <result column="real_name" property="realName" jdbcType="VARCHAR"/>
        <result column="gender" property="gender" jdbcType="TINYINT"/>
        <result column="email" property="email" jdbcType="VARCHAR"/>
        <result column="phone" property="phone" jdbcType="VARCHAR"/>
        <result column="user_type" property="userType" jdbcType="VARCHAR"/>
        <result column="status" property="status" jdbcType="VARCHAR"/>
        <result column="user_no" property="userNo" jdbcType="VARCHAR"/>
        <result column="create_time" property="createTime" jdbcType="TIMESTAMP"/>
        <result column="update_time" property="updateTime" jdbcType="TIMESTAMP"/>
    </resultMap>

    <!-- 通用查询结果列 -->
    <sql id="Base_Column_List">
        u.id, u.username, u.password, u.real_name, u.gender, u.email, u.phone,
        u.user_type, u.status, u.user_no, u.create_time, u.update_time
    </sql>

    <!-- 获取所有用户（分页） -->
    <select id="getAllUsers" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        <where>
            <if test="status != null and status != ''">
                AND u.status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="userType != null and userType != ''">
                AND u.user_type = #{userType,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY u.create_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset,jdbcType=BIGINT}, #{limit,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 获取用户总数 -->
    <select id="getUserCount" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM user u
        <where>
            <if test="status != null and status != ''">
                AND u.status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="userType != null and userType != ''">
                AND u.user_type = #{userType,jdbcType=VARCHAR}
            </if>
        </where>
    </select>

    <!-- 根据ID获取用户 -->
    <select id="getUserById" parameterType="java.lang.Long" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        WHERE u.id = #{id,jdbcType=BIGINT}
    </select>

    <!-- 根据用户名获取用户 -->
    <select id="getUserByUsername" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        WHERE u.username = #{username,jdbcType=VARCHAR}
    </select>

    <!-- 根据角色获取用户（分页） -->
    <!-- 
    <select id="getUsersByRole" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>,
        r.id as role_id,
        r.name as role_name,
        r.code as role_code
        FROM user u
        LEFT JOIN user_role ur ON u.id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.id
        WHERE u.role = #{role,jdbcType=VARCHAR}
        ORDER BY u.create_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset,jdbcType=INTEGER}, #{limit,jdbcType=INTEGER}
        </if>
    </select>
     -->

    <!-- 根据状态获取用户（分页） -->
    <select id="getUsersByStatus" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        WHERE u.status = #{status,jdbcType=VARCHAR}
        ORDER BY u.create_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset,jdbcType=BIGINT}, #{limit,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 用户登录 -->
    <select id="login" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        WHERE u.username = #{username,jdbcType=VARCHAR}
        AND u.password = #{password,jdbcType=VARCHAR}
        AND u.status = 'Active'
    </select>

    <!-- 搜索用户（分页） -->
    <select id="searchUsers" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        <where>
            <if test="keyword != null and keyword != ''">
                AND (
                    u.username LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
                    OR u.real_name LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
                    OR u.email LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
                    OR u.phone LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
                    OR u.user_type LIKE CONCAT('%', #{keyword,jdbcType=VARCHAR}, '%')
                )
            </if>
            <if test="status != null and status != ''">
                AND u.status = #{status,jdbcType=VARCHAR}
            </if>
            <if test="userType != null and userType != ''">
                AND u.user_type = #{userType,jdbcType=VARCHAR}
            </if>
        </where>
        ORDER BY u.create_time DESC
        <if test="offset != null and limit != null">
            LIMIT #{offset,jdbcType=BIGINT}, #{limit,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 添加用户 -->
    <insert id="addUser" parameterType="com.campus.entity.User" useGeneratedKeys="true" keyProperty="id">
        INSERT INTO user (username, password, real_name, gender, email, phone,
                          user_type, status, user_no, create_time, update_time
        )
        VALUES (
            #{username,jdbcType=VARCHAR}, #{password,jdbcType=VARCHAR}, #{realName,jdbcType=VARCHAR},
            #{gender,jdbcType=TINYINT}, #{email,jdbcType=VARCHAR}, #{phone,jdbcType=VARCHAR},
            #{userType,jdbcType=VARCHAR}, #{status,jdbcType=VARCHAR}, #{userNo,jdbcType=VARCHAR}, NOW(), NOW()
        )
    </insert>

    <!-- 批量添加用户 -->
    <insert id="batchAddUsers" parameterType="java.util.List">
        INSERT INTO user (
        username, password, real_name, gender, email, phone,
        user_type, status, user_no, create_time, update_time
        )
        VALUES
        <foreach collection="list" item="item" separator=",">
            (
                #{item.username,jdbcType=VARCHAR}, #{item.password,jdbcType=VARCHAR}, #{item.realName,jdbcType=VARCHAR},
            #{item.gender,jdbcType=TINYINT}, #{item.email,jdbcType=VARCHAR}, #{item.phone,jdbcType=VARCHAR},
            #{item.userType,jdbcType=VARCHAR}, #{item.status,jdbcType=VARCHAR}, #{item.userNo,jdbcType=VARCHAR}, NOW(),
            NOW()
            )
        </foreach>
    </insert>

    <!-- 更新用户 -->
    <update id="updateUser" parameterType="com.campus.entity.User">
        UPDATE user
        <set>
            <if test="username != null">username = #{username,jdbcType=VARCHAR},</if>
            <if test="realName != null">real_name = #{realName,jdbcType=VARCHAR},</if>
            <if test="gender != null">gender = #{gender,jdbcType=TINYINT},</if>
            <if test="email != null">email = #{email,jdbcType=VARCHAR},</if>
            <if test="phone != null">phone = #{phone,jdbcType=VARCHAR},</if>
            <if test="userType != null">user_type = #{userType,jdbcType=VARCHAR},</if>
            <if test="status != null">status = #{status,jdbcType=VARCHAR},</if>
            <if test="userNo != null">user_no = #{userNo,jdbcType=VARCHAR},</if>
            update_time = NOW()
        </set>
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 批量更新用户状态 -->
    <update id="batchUpdateUserStatus">
        UPDATE user
        SET
            status = #{status,jdbcType=VARCHAR},
            update_time = NOW()
        WHERE id IN
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId,jdbcType=BIGINT}
        </foreach>
    </update>

    <!-- 删除用户 -->
    <delete id="deleteUser" parameterType="java.lang.Long">
        DELETE FROM user
        WHERE id = #{id,jdbcType=BIGINT}
    </delete>

    <!-- 批量删除用户 -->
    <delete id="batchDeleteUsers" parameterType="java.util.List">
        DELETE FROM user
        WHERE id IN
        <foreach collection="userIds" item="userId" open="(" separator="," close=")">
            #{userId,jdbcType=BIGINT}
        </foreach>
    </delete>

    <!-- 更新用户状态 -->
    <update id="updateUserStatus">
        UPDATE user
        SET
            status = #{status,jdbcType=VARCHAR},
            update_time = NOW()
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 更新密码 -->
    <update id="updatePassword">
        UPDATE user
        SET
            password = #{password,jdbcType=VARCHAR},
            update_time = NOW()
        WHERE id = #{id,jdbcType=BIGINT}
    </update>

    <!-- 获取角色用户数 -->
    <!-- 
    <select id="getRoleUserCount" parameterType="java.lang.String" resultType="java.lang.Integer">
        SELECT COUNT(*)
        FROM user u
        LEFT JOIN user_role ur ON u.id = ur.user_id
        LEFT JOIN role r ON ur.role_id = r.id
        WHERE r.name = #{role,jdbcType=VARCHAR}
    </select>
     -->

    <!-- 获取状态用户数 -->
    <select id="getStatusUserCount" parameterType="java.lang.String" resultType="java.lang.Long">
        SELECT COUNT(*)
        FROM user
        WHERE status = #{status,jdbcType=VARCHAR}
    </select>

    <!-- 检查用户名是否存在 -->
    <select id="isUsernameExists" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM user
        WHERE username = #{username,jdbcType=VARCHAR}
        <if test="id != null">
            AND id != #{id,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 检查邮箱是否存在 -->
    <select id="isEmailExists" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM user
        WHERE email = #{email,jdbcType=VARCHAR}
        <if test="id != null">
            AND id != #{id,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 检查手机号是否存在 -->
    <select id="isPhoneExists" parameterType="java.lang.String" resultType="java.lang.Boolean">
        SELECT COUNT(*) > 0
        FROM user
        WHERE phone = #{phone,jdbcType=VARCHAR}
        <if test="id != null">
            AND id != #{id,jdbcType=BIGINT}
        </if>
    </select>

    <!-- 根据角色ID列表查询用户ID列表 -->
    <select id="findUserIdsByRoleIds" resultType="java.lang.Long">
        SELECT DISTINCT user_id
        FROM user_role
        WHERE role_id IN
        <foreach collection="roleIds" item="roleId" open="(" separator="," close=")">
            #{roleId,jdbcType=BIGINT}
        </foreach>
    </select>

    <!-- 根据部门ID列表查询用户ID列表 -->
    <select id="findUserIdsByDepartmentIds" resultType="java.lang.Long">
        SELECT DISTINCT t.user_id FROM teacher t WHERE t.department_id IN
        <foreach collection="departmentIds" item="deptId" open="(" separator="," close=")">
            #{deptId,jdbcType=BIGINT}
        </foreach>
        UNION
        SELECT DISTINCT s.user_id FROM student s WHERE s.department_id IN
        <foreach collection="departmentIds" item="deptId" open="(" separator="," close=")">
            #{deptId,jdbcType=BIGINT}
        </foreach>
    </select>

    <!-- 查询所有有效的用户ID列表 -->
    <select id="findAllUserIds" resultType="java.lang.Long">
        SELECT id
        FROM user
        WHERE status = 'Active'
    </select>

    <!-- 根据用户类型获取用户 -->
    <select id="findByUserType" parameterType="java.lang.String" resultMap="BaseResultMap">
        SELECT
        <include refid="Base_Column_List"/>
        FROM user u
        WHERE u.user_type = #{userType, jdbcType=VARCHAR}
    </select>

    <!-- 根据状态获取用户（分页）(Removed role join) -->
</mapper>